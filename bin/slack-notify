#!/usr/bin/env bash
# Usage: slack-notify [options] <message>
#        echo "Message" | slack-notify [options]
#        slack-notify -F "Field Title|Body" [options]
#
# NAME
#   slack-notify -- send notifications via legacy Slack incoming webhooks
#
# SYNOPSIS
#   slack-notify [options] <message>
#   echo "Message" | slack-notify [options]
#   slack-notify -F "Field Title|Body" [options]
#
# DESCRIPTION
#   Without the `-F` / `--field` option, a standard text message sent to the
#   webhook, either as the first argument or STDIN.
#
#   Text Example:
#     $ slack-notify "This is a message"
#     $ echo "This is a message | slack-notify"
#
#   When `-F` / `--field` is used, a Slack message "attachment" is used (not
#   to be confused with a file attachment). Messages sent via legacy webhooks
#   can have more than one attachment, or none at all as with th text example
#   above. Attachments have one or more fields. By default, one attachment is
#   used and multiple fields can be added to it by specifying `-F` / `--field`
#   more than once. To send more than one attachment, `-F` / `--field` can be
#   used with an index; eg: `-F1` / `--field2`. To further style messages, the
#   `-c` / `--color`, `-p` / `--pretext`, `-b` / `--fallback`, and `-f` /
#   `--footer` options can also be used with an index.
#
#   Fields have a title and a value. The option can be used more than
#   once. The argument to `-F` / `--field` is a string, separated by the `-s`
#   / `--separator` character (`|` by default).
#
#   Slack allows specifying long or short fields. If multiple short fields are
#   sent, they will be displayed in 2 columns in Slack clients. Long fields
#   span both columns. Fields are marked short by default or when the title is
#   prefixed with `short:`. Fields are marked long when the title is prefixed
#   with `long:`.
#
#   Single attachment example with 2 fields:
#     $ slack-notify -F "Field Title|Body" -F "Another Field|Body"
#
#   Multiple attachments, red and green:
#     $ slack-notify \
#       -F "Field Title|Body" \
#       -F "Another Field|Body" \
#       -c FF0000 \
#       -f "The First Footer" \
#       -F1 "Attachment 2 - Field Title|Body" \
#       -F1 "Attachment 2 - Another Field|Body" \
#       -F1 "long:Attachment 2 - Big Long Field|Body" \
#       -c1 00FF00 \
#       -p1 "Attachment 2 Ready"
#
#   The following options have no effect when sending a plaintext message:
#     -b / --fallback
#     -p / --pretext
#     -c / --color
#     -s / --separator
#     -f / --footer
#
# OPTIONS
#   -w URL, --webhook-url URL
#       Slack webhook URL. Required unless the `$SLACK_WEBHOOK_URL`
#       environment variable is set.
#
#   -c CHANNEL, --channel CHANNEL
#       Slack channel/user to send the message to. If not supplied, the
#       default channel configured on the webhook is used by Slack.
#
#   -i ICON, --icon ICON
#       Icon to use, either an emoji code like `:megaphone:`, or an image URL.
#       If not supplied, the default icon configured on the webhook is used by
#       Slack.
#
#   -u USER, --username USER
#       User to send the message as. If not supplied, the default user
#       configured on the webhook is used by Slack.
#
#   -F FIELD, --field FIELD
#       Send a message field in the format where FIELD is one of the following
#       formats: `Title|Value`, `long:Title|Value`, `short:Title|Value`. The
#       field separator `|` character can be customized with the `-s` /
#       `--separator` option.
#
#   -F[0-9]+ FIELD, --field[0-9]+ FIELD
#       Same as `-F` / `--field` above, but adds the field a to the message
#       attachment with the specified index. Eg: `-F1 FIELD`,
#       `--field2 FIELD`.
#
#   -b FALLBACK, --fallback FALLBACK
#       Fallback text to send. This is displayed in notifications. If not
#       supplied, a default fallback is created using a line "Title: Value"
#       for each field. Ignored if at least one field is not supplied with
#       `-F` / `--field`.
#
#   -b[0-9]+ FALLBACK, --fallback[0-9]+ FALLBACK
#       Same as `-f` / `--fallback` above, but adds the fallback text to the
#       message attachment with the specified index. Eg: `-b1 FALLBACK`,
#       `--fallback2 FALLBACK`.
#
#   -p PRETEXT, --pretext PRETEXT
#       Message pretext, displayed above the attachment. Ignored if at least
#       one field is not supplied with `-F` / `--field`.
#
#   -p[0-9]+ PRETEXT, --pretext[0-9]+ PRETEXT
#       Same as `-p` / `--pretext` above, but adds the pretext to the message
#       attachment with the specified index. Eg: `-p1 PRETEXT`,
#       `--pretext2 PRETEXT`.
#
#   -c COLOR, --color COLOR
#       Color of the attachment in CSS hex format (i.e. `#FF0000`). Ignored if
#       at least one field is not supplied with `-F` / `--field`.
#
#   -c[0-9]+ COLOR, --color[0-9]+ COLOR
#       Same as `-c` / `--color` above, but adds the color to the message
#       attachment with the specified index. Eg: `-c1 COLOR`,
#       `--color2 COLOR`.
#
#   -f FOOTER, --footer FOOTER
#       Footer text, displayed below the attachment. Ignored if at least one
#       field is not supplied with `-F` / `--field`.
#
#   -f[0-9]+ FOOTER, --footer[0-9]+ FOOTER
#       Same as `--footer` above, but adds the footer to the message
#       attachment with the specified index. Eg: `-f1 FOOTER`,
#       `--footer2 FOOTER`.
#
#   -P, --print-payload
#       Print the Slack payload instead of sending it.
#
#   -h, --help
#       Print this help message.
#
# OPTIONAL CONFIGURATION
#   `$SLACK_WEBHOOK_URL` can be set to avoid passing webhooks via `-w` /
#   `--webhook-url` when calling this script. Example:
#
#      export SLACK_WEBHOOK_URL=https://hooks.slack.com/services/...
#
# EXAMPLES
#   Note: all examples below assume the `$SLACK_WEBHOOK_URL` environment
#   variable is set or you must include the `-w` / `--webhook-url` option.
#
#   Send a simple text notification
#     $ slack-notify "Warning, something broke"
#
#   Or use a multi-line body
#     $ slack-notify "Subject
#
#     This is the body"
#
#   Using STDIN
#     $ { echo "Errors\n\n"; tail -5 /var/log/messages } | slack-notify
#
#     $ slack-notify
#     This is a message
#     ^d
#
#     $ slack-notify <<< 'Red alert, Number 1!'
#
#   Send a single attachment with 3 fields, the top two short, and the last
#   one long, with the color set to green, and a simple pretext
#
#     $ slack-notify \
#         -F "Date|2023-07-17" \
#         -F 'Amount|$10.99' \
#         -F 'long:Description|Pizza' \
#         -p 'New Order Received:' \
#         -c 00FF00
#
#   Send two attachments, the first with 2 short fields with the color set to
#   green, the second with 1 long attachment with the color set to red.
#
#     $ slack-notify \
#         -F1 'Username|josh' \
#         -F1 'GitHub|<https://github.com/itspriddle|itspriddle>' \
#         -c1 00FF00 \
#         -p1 'New User Created:' \
#         -F1 'long:Field 3|Value 3' \
#         -c2 FF0000
#
# BUG REPORTS
#   Issues can be reported on GitHub:
#
#   https://github.com/itspriddle/slack-notify/issues
#
# AUTHOR
#   Joshua Priddle <jpriddle@me.com>
#
#   https://github.com/itspriddle/slack-notify#readme
#
# SEE ALSO
#   https://api.slack.com/legacy/custom-integrations/messaging/webhooks

if [[ "$DEBUG" ]]; then
  export PS4='+ [${BASH_SOURCE##*/}:${LINENO}] '
  set -x
fi

set -e

VERSION="0.0.1"

webhook_url="$SLACK_WEBHOOK_URL"

fields=()
fallbacks=()
colors=()
pretexts=()
footers=()
fs="|"

# Check for a help flag first so we can print it if jq or curl are missing.
for arg in "$@"; do
  if [[ "$arg" =~ ^(--help|-h)$ ]]; then
    sed -ne '/^#/!q;s/^#$/# /;/^# /s/^# //p' < "$0" |
      awk -v f="${1#-h}" '!f&&/^Usage:/||u{u=!/^\s*$/;if(!u)exit}u||f'
    exit 0
  fi
done

if ! command -v jq >/dev/null; then
  echo "jq is required" >&2
  exit 1
elif ! command -v curl >/dev/null; then
  echo "curl is required" >&2
  exit 1
fi

while [[ "$1" ]]; do
  arg="$1"

  if [[ "$arg" =~ ^-F([0-9]+)?$ ]]; then
    arg="--field${arg#-F}"
  elif [[ "$arg" =~ ^-c([0-9]+)?$ ]]; then
    arg="--color${arg#-c}"
  elif [[ "$arg" =~ ^-f([0-9]+)?$ ]]; then
    arg="--footer${arg#-f}"
  elif [[ "$arg" =~ ^-p([0-9]+)?$ ]]; then
    arg="--pretext${arg#-p}"
  elif [[ "$arg" =~ ^-b([0-9]+)?$ ]]; then
    arg="--fallback${arg#-b}"
  fi

  if [[ "$arg" =~ ^--field([0-9]+)?$ ]]; then
    index="${arg#--field}"
    raw_field="$2"
    short="true"

    if [[ "$raw_field" =~ ^(long|short): ]]; then
      [[ "${raw_field:0:4}" = long ]] && short="false"

      raw_field="${raw_field#*:}"
    fi

    title="${raw_field%"$fs"*}"
    value="${raw_field#*"$fs"}"

    fields[${index:-0}]+=$(jq -n \
      --arg title "$title" \
      --arg value "$value" \
      --argjson short "$short" \
      '[{"title": $title, "value": $value, "short": $short}]'
    )
    shift 2
  elif [[ "$arg" =~ ^--color([0-9]+)?$ ]]; then
    index="${arg#--color}"
    colors[${index:-0}]="$2"
    shift 2
  elif [[ "$arg" =~ ^--footer([0-9]+)?$ ]]; then
    index="${arg#--footer}"
    footers[${index:-0}]="$2"
    shift 2
  elif [[ "$arg" =~ ^--pretext([0-9]+)?$ ]]; then
    index="${arg#--pretext}"
    pretexts[${index:-0}]="$2"
    shift 2
  elif [[ "$arg" =~ ^--fallback([0-9]+)?$ ]]; then
    index="${arg#--fallback}"
    fallbacks[${index:-0}]="$2"
    shift 2
  elif [[ "$arg" =~ ^(--icon|-i)$ ]]; then
    icon="$2"
    shift 2
  elif [[ "$arg" =~ ^(--username|-u)$ ]]; then
    username="$2"
    shift 2
  elif [[ "$arg" =~ ^(--channel|-C)$ ]]; then
    channel="$2"
    shift 2
  elif [[ "$arg" =~ ^(--separator|-s)$ ]]; then
    fs="$2"
    shift 2
  elif [[ "$arg" =~ ^(--webhook-url|-w)$ ]]; then
    webhook_url="$2"
    shift 2
  elif [[ "$arg" =~ ^(--print-payload|-P)$ ]]; then
    print_payload="true"
    shift
  elif [[ "$arg" =~ ^(--version|-V)$ ]]; then
    echo "slack-notify v$VERSION"
    exit 0
  elif [[ "$arg" == "--" ]]; then
    shift
    break
  elif [[ "$arg" == "-" ]]; then
    break
  elif [[ "$arg" =~ ^- ]]; then
    echo "Unknown argument: $arg"
    exit 1
  else
    break
  fi
done

payload=$(jq -n \
  --arg icon "$icon" \
  --arg channel "$channel" \
  --arg username "$username" \
  '{
    (
      if $icon | startswith(":") then
        "icon_emoji"
      else
        "icon_url"
      end
    ): $icon,
    "channel": $channel,
    "username": $username,
  } | with_entries(select(.value != ""))'
)

if [[ "${#fields[@]}" -gt 0 ]]; then
  for i in "${!fields[@]}"; do
    payload=$(jq \
      --arg fallback "${fallbacks[$i]}" \
      --arg pretext "${pretexts[$i]}" \
      --arg color "${colors[$i]}" \
      --arg footer "${footers[$i]}" \
      --argjson fields "$(jq -s add <<< "${fields[$i]}")" \
      '.attachments += [{
          "fallback": (
            if $fallback == "" then
              $fields | map("\(.title): \(.value)") | join("\n")
            else
              $fallback
            end
          ),
          "pretext": $pretext,
          "color": $color,
          "footer": $footer,
          "fields": $fields,
          "mrkdwn_in": ["fields", "text", "pretext", "footer"],
        } | with_entries(
          select(.value | if type == "array" then . != [] else . != "" end)
        )]
      ' <<< "$payload"
    )
  done
else
  if [[ "${#fallbacks[@]}" -gt 0 ]]; then
    echo "Fallbacks were set but no fields" >&2
    bail=1
  fi

  if [[ "${#colors[@]}" -gt 0 ]]; then
    echo "Colors were set but no fields" >&2
    bail=1
  fi

  if [[ "${#pretexts[@]}" -gt 0 ]]; then
    echo "Pretexts were set but no fields" >&2
    bail=1
  fi

  if [[ "${#footers[@]}" -gt 0 ]]; then
    echo "Footers were set but no fields" >&2
    bail=1
  fi

  if [[ "$bail" ]]; then
    exit 1
  fi

  if [[ "$1" == "-" ]] || [[ -z "$1" ]]; then
    text="$(cat)"
  else
    text="$1"
  fi

  if [[ -z "$text" ]]; then
    echo "Must supply text to send via argument, STDIN, or --field" >&2
    exit 1
  fi

  payload=$(jq --arg text "$text" '.text = $text' <<< "$payload")
fi

if [[ "$print_payload" ]]; then
  jq <<< "$payload"
else
  if [[ -z "$webhook_url" ]]; then
    echo "Must supply webhook URL via --webhook-url or SLACK_WEBHOOK_URL" >&2
    exit 1
  fi

  result=$(curl --silent --data @- "$webhook_url" <<< "$payload")

  if [[ "$result" != "ok" ]]; then
    echo "Error: $result" >&2
    exit 1
  fi
fi
